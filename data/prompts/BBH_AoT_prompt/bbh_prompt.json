{
    "boolean_expressions": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Evaluate the result of a random Boolean expression.\n\nnot ( ( not not True ) ) is",
                "assistant": "```python\ndef evaluate_expression(expression):\n    \"\"\"\n    This function evaluates the given boolean expression.\n    \"\"\"\n    result = eval(expression)\n    return result\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"not ((not not True))\"\n    answer = evaluate_expression(expression)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{False}."
            },
            {
                "user": "True and False and not True and True is",
                "assistant": "```python\ndef evaluate_expression(expression):\n    \"\"\"\n    This function evaluates the given boolean expression.\n    \"\"\"\n    result = eval(expression)\n    return result\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"True and False and not True and True\"\n    answer = evaluate_expression(expression)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{False}."
            },
            {
                "user": "not not ( not ( False ) ) is",
                "assistant": "```python\ndef evaluate_expression(expression):\n    \"\"\"\n    This function evaluates the given boolean expression.\n    \"\"\"\n    result = eval(expression)\n    return result\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"not not (not (False))\"\n    answer = evaluate_expression(expression)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{True}."
            }
        ]
    },
    "causal_judgement": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Answer questions about causal attribution.\n\nHow would a typical person answer each of the following questions about causation?\nFrank T., had an ongoing dispute with his neighbor over a stretch of land and one day decided to shoot his neighbor in the body. Frank T. had no experience with guns, his hand slipped on the barrel of the gun, and the shot went wild. Nonetheless, the bullet bounced off a large boulder several feet away and hit the neighbor's body, causing significant injury. Did Frank T. intentionally shoot his neighbor in the body?\nOptions:\n- Yes\n- No",
                "assistant": "Step 1: Identify the key elements of the scenario.\nFrank T. had a dispute with his neighbor and decided to shoot him. However, Frank T. had no experience with guns, his hand slipped, and the shot went wild. The bullet bounced off a boulder and hit the neighbor.\n\nStep 2: Analyze the intentionality of Frank T.'s actions.\nFrank T. intended to shoot his neighbor, but the actual shooting that occurred was not as he intended. His hand slipped, causing the bullet to go off course and only hit the neighbor after bouncing off a boulder.\n\nStep 3: Determine if Frank T. intentionally shot his neighbor in the body.\nWhile Frank T. intended to shoot his neighbor, the actual event that led to the neighbor being shot was not intentional. Frank T.'s hand slipped, and the bullet hit the neighbor only after bouncing off a boulder. This suggests that the specific act of shooting the neighbor in the body was not intentional.\n\nTherefore, the answer is \\boxed{No}."
            },
            {
                "user": "How would a typical person answer each of the following questions about causation?\nSuzy and Billy are working on a project that is very important for our nation's security. The boss tells them both: \"Be sure that you are here at exactly 9 am. It is absolutely essential that you arrive at that time.\" Both Billy and Suzy arrive at 9 am. As it happens, there was a motion detector installed in the room where they arrived. The motion detector was set up to be triggered if at least one person appeared in the room at the same time. So the motion detector went off. Did Billy cause the motion detector to go off?\nOptions:\n- Yes\n- No",
                "assistant": "Step 1: Identify the conditions for the motion detector to go off.\nThe text states that the motion detector was set up to be triggered if at least one person appeared in the room at the same time.\n\nStep 2: Determine if Billy met the conditions for the motion detector to go off.\nBilly arrived in the room at 9 am, which means he was present in the room.\n\nStep 3: Determine if Billy's presence caused the motion detector to go off.\nGiven that the motion detector was set to go off if at least one person was present, and Billy was present, we can conclude that Billy's presence caused the motion detector to go off.\n\nTherefore, the answer is \\boxed{Yes}."
            },
            {
                "user": "How would a typical person answer each of the following questions about causation?\nGeorge and his sister Lena reunite at their parents' house for Thanksgiving. Whereas George just got into medical school, Lena is unhappy in her marriage and recently lost her job. Over the course of the day, George and Lena get into a number of heated arguments. Later in the afternoon they play a game of darts. They split the first two games, and the third game is close until the end. Who will win comes down to George's last shot. If he hits a high point region, he wins; if he hits a low point region, Lena wins. George thinks of the difficult time Lena is having, and he really wants to let her win. He aims the dart at the low point region. He sets up his shot and the dart lands in the low point region. After his shot, Lena wins the game and is very happy. Did George hit the low point region intentionally?\nOptions:\n- Yes\n- No",
                "assistant": "Step 1: Identify the key elements in the scenario.\nGeorge is playing a game of darts with his sister Lena. The outcome of the game depends on George's last shot. If he hits a high point region, he wins; if he hits a low point region, Lena wins. George wants to let Lena win, so he aims the dart at the low point region.\n\nStep 2: Analyze the action.\nGeorge intentionally aims the dart at the low point region. This is a conscious decision on his part, as he wants Lena to win the game.\n\nStep 3: Answer the question.\nGiven that George consciously aimed at the low point region to let Lena win, it can be concluded that he hit the low point region intentionally.\n\nTherefore, the answer is \\boxed{Yes}."
            }
        ]
    },
    "date_understanding": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Infer the date from context.\n\nToday is Christmas Eve of 1937. What is the date 10 days ago in MM/DD/YYYY?\nOptions:\n(A) 12/14/2026\n(B) 12/14/1950\n(C) 12/14/2007\n(D) 12/14/1937\n(E) 07/14/1938\n(F) 12/14/1988",
                "assistant": "Step 1: Determine today's date.\nSince today is Christmas Eve of 1937, today's date is December 24, 1937.\n\nStep 2: Determine the date 10 days ago.\nSince today's date is December 24, 1937, 10 days before today is December 14, 1937, that is 12/14/1937.\n\nStep 3: Select the option.\nAmong all the options, option (D) is 12/14/1937.\n\nTherefore, the answer is \\boxed{(D)}."
            },
            {
                "user": "Tomorrow is 11/12/2019. What is the date one year ago from today in MM/DD/YYYY?\nOptions:\n(A) 09/04/2018\n(B) 11/11/2018\n(C) 08/25/2018\n(D) 11/02/2018\n(E) 11/04/2018",
                "assistant": "Step 1: Determine today's date.\nSince tomorrow is 11/12/2019, today's date is 11/11/2019.\n\nStep 2: Determine the date one year ago.\nSince today's date is 11/11/2019, one year before today is 11/11/2018.\n\nStep 3: Select the option.\nAmong all the options, option (B) is 11/11/2018.\n\nTherefore, the answer is \\boxed{(B)}."
            },
            {
                "user": "Jane and John married on Jan 2, 1958. It is their 5-year anniversary today. What is the date tomorrow in MM/DD/YYYY?\nOptions:\n(A) 01/11/1961\n(B) 01/03/1963\n(C) 01/18/1961\n(D) 10/14/1960\n(E) 01/03/1982\n(F) 12/03/1960",
                "assistant": "Step 1: Determine today's date.\nSince Jane and John married on Jan 2, 1958, and today is their 5-year anniversary, then today's date is Jan 2, 1963.\n\nStep 2: Determine tomorrow's date.\nSince today's date is Jan 2, 1963, the date tomorrow is Jan 3, 1963, that is 01/03/1963.\n\nStep 3: Select the option.\nAmong all the options, option (B) is 01/03/1963.\n\nTherefore, the answer is \\boxed{(B)}."
            }
        ]
    },
    "disambiguation_qa": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Clarify the meaning of sentences with ambiguous pronouns.\n\nIn the following sentences, explain the antecedent of the pronoun (which thing the pronoun refers to), or state that it is ambiguous.\nSentence: The chief told the counselor that they took the day off.\nOptions:\n(A) The chief took the day off\n(B) The counselor took the day off\n(C) Ambiguous",
                "assistant": "Step 1: Identify the pronoun in the sentence.\nThe pronoun that we need to clarify is \"they\".\n\nStep 2: Identify the potential antecedents of the pronoun.\nThe potential antecedents of \"they\" could either be \"the chief\" or \"the counselor\".\n\nStep 3: Analyze the sentence structure and context to determine the antecedent of the pronoun.\nTo determine who \"they\" refers to, we consider the sentence structure \"X told Y that they did something\", where \"X\" is the chief and \"Y\" is the counselor. \nFirst, we consider the scenario \"X told Y that Y did something\" (meaning the counselor took the day off). This doesn't quite make sense as the counselor would already be aware if they had taken the day off, thus the chief wouldn't need to inform them.\nNext, we consider \"X told Y that X did something\" (meaning the chief took the day off). This scenario logically fits as the chief would be sharing new information about their own actions (taking the day off) that the counselor might not have known.\nGiven this analysis, it's clear that \"they\" refers to \"X\", which in this context is the chief.\n\nTherefore, the answer is \\boxed{(A)}."
            },
            {
                "user": "In the following sentences, explain the antecedent of the pronoun (which thing the pronoun refers to), or state that it is ambiguous.\nSentence: The manager sent a message to the secretary, but he didn't reply yet.\nOptions:\n(A) The secretary didn't reply yet\n(B) The manager didn't reply yet\n(C) Ambiguous",
                "assistant": "Step 1: Identify the pronoun in the sentence.\nThe pronoun that we need to clarify is \"he\".\n\nStep 2: Identify the potential antecedents of the pronoun.\nThe potential antecedents of \"he\" could either be \"the manager\" or \"the secretary\".\n\nStep 3: Analyze the sentence structure and context to determine the antecedent of the pronoun.\nThe sentence structure is \"X sent a message to Y, but he didn't reply yet\", where \"X\" is the manager and \"Y\" is the secretary.\nGiven the context, it would make most sense for \"he\" to refer to the person who received the message and is expected to reply, which is \"Y\", the secretary.\n\nTherefore, the answer is \\boxed{(A)}."
            },
            {
                "user": "In the following sentences, explain the antecedent of the pronoun (which thing the pronoun refers to), or state that it is ambiguous.\nSentence: Bailey will plan to meet the director at his office\nOptions:\n(A) It will be Bailey's office\n(B) It will be the director's office\n(C) Ambiguous",
                "assistant": "Step 1: Identify the pronoun in the sentence.\nIn the sentence, the pronoun that needs clarification is \"his\".\n\nStep 2: Identify the potential antecedents of the pronoun.\nThe pronoun \"his\" could potentially refer to either \"Bailey\" or \"the director\".\n\nStep 3: Analyze the sentence structure to determine the antecedent of the pronoun.\nIn the sentence, \"his\" could logically refer to either \"Bailey\" or \"the director\", making it ambiguous. Both interpretations are plausible as Bailey could plan to meet the director at either Bailey's or the director's office.\n\nTherefore, the answer is \\boxed{(C)}."
            }
        ]
    },
    "dyck_languages": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Correctly close a Dyck-n word.\n\nComplete the rest of the sequence, making sure that the parentheses are closed properly. Input: [ { [",
                "assistant": "```python\ndef close_dyck_word(sequence):\n    \"\"\"\n    This function takes a sequence of opening brackets and returns the sequence of closing brackets \n    that would correctly close the Dyck word.\n    \"\"\"\n    closing_brackets = {'<': '>', '(': ')', '[': ']', '{': '}'}\n    stack = []\n    for bracket in sequence.split():\n        if bracket in closing_brackets:\n            stack.append(bracket)\n        else:\n            stack.pop()\n    closing_sequence = [closing_brackets[bracket] for bracket in reversed(stack)]\n    return ' '.join(closing_sequence)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    sequence = '[ { ['\n    closing_sequence = close_dyck_word(sequence)\n    print(closing_sequence)\n\nmain()\n```\n\nThe answer is \\boxed{] } ]}."
            },
            {
                "user": "Complete the rest of the sequence, making sure that the parentheses are closed properly. Input: < > ( ( [ [ ( { } ) [ < > ] ]",
                "assistant": "```python\ndef close_dyck_word(sequence):\n    \"\"\"\n    This function takes a sequence of opening brackets and returns the sequence of closing brackets \n    that would correctly close the Dyck word.\n    \"\"\"\n    closing_brackets = {'<': '>', '(': ')', '[': ']', '{': '}'}\n    stack = []\n    for bracket in sequence.split():\n        if bracket in closing_brackets:\n            stack.append(bracket)\n        else:\n            stack.pop()\n    closing_sequence = [closing_brackets[bracket] for bracket in reversed(stack)]\n    return ' '.join(closing_sequence)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    sequence = '< > ( ( [ [ ( { } ) [ < > ] ]'\n    closing_sequence = close_dyck_word(sequence)\n    print(closing_sequence)\n\nmain()\n```\n\nThe answer is \\boxed{] ) )}."
            },
            {
                "user": "Complete the rest of the sequence, making sure that the parentheses are closed properly. Input: < [ < [ { < [ ] < { } > > } ] > { { ( ) } { < [ < > ] > }",
                "assistant": "```python\ndef close_dyck_word(sequence):\n    \"\"\"\n    This function takes a sequence of opening brackets and returns the sequence of closing brackets \n    that would correctly close the Dyck word.\n    \"\"\"\n    closing_brackets = {'<': '>', '(': ')', '[': ']', '{': '}'}\n    stack = []\n    for bracket in sequence.split():\n        if bracket in closing_brackets:\n            stack.append(bracket)\n        else:\n            stack.pop()\n    closing_sequence = [closing_brackets[bracket] for bracket in reversed(stack)]\n    return ' '.join(closing_sequence)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    sequence = '< [ < [ { < [ ] < { } > > } ] > { { ( ) } { < [ < > ] > }'\n    closing_sequence = close_dyck_word(sequence)\n    print(closing_sequence)\n\nmain()\n```\n\nThe answer is \\boxed{} ] >}."
            }
        ]
    },
    "formal_fallacies": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Distinguish deductively valid arguments from formal fallacies.\n\n\"It is not always easy to see who is related to whom -- and in which ways. The following argument pertains to this question: To begin with, Lesley is a close friend of Fernando. Moreover, being a close friend of Fernando or a schoolmate of Lowell is sufficient for being a great-grandfather of Leroy. It follows that Lesley is a great-grandfather of Leroy.\"\nIs the argument, given the explicitly stated premises, deductively valid or invalid?\nOptions:\n- valid\n- invalid",
                "assistant": "Step 1: Identify the premises and conclusion of the argument.\nPremise 1: Lesley is a close friend of Fernando, i.e., Lesley = friend(Fernando).\nPremise 2: Being a close friend of Fernando or a schoolmate of Lowell is sufficient for being a great-grandfather of Leroy, i.e.,  If X = friend(Fernando) OR schoolmate(Lowell), then X = great-grandfather(Leroy).\nConclusion: Lesley is a great-grandfather of Leroy, i.e., Lesley = great-grandfather(Leroy)?\n\nStep 2: Evaluate the logical structure of the argument.\nFrom premise 1, we know that Lesley = friend(Fernando).\nFrom premise 2, we know that If X = friend(Fernando), then X = great-grandfather(Leroy).\nTherefore, let X=Lesley, we know that Lesley = great-grandfather(Leroy), which is the conclusion.\n\nStep 3: Determine if the argument is deductively valid or invalid.\nA deductively valid argument is one where if the premises are true, then the conclusion must be true. Given the premises in this argument, the conclusion logically follows, making the argument deductively valid.\n\nTherefore, the answer is \\boxed{valid}."
            },
            {
                "user": "\"It is not always easy to see who is related to whom -- and in which ways. The following argument pertains to this question: Whoever is not a great-grandfather of Clyde is a stepbrother of Brian. Being an ancestor of Dana is sufficient for not being a great-grandfather of Clyde. We may conclude: Everyone who is an ancestor of Dana is a stepbrother of Brian, too.\"\nIs the argument, given the explicitly stated premises, deductively valid or invalid?\nOptions:\n- valid\n- invalid",
                "assistant": "Step 1: Identify the premises and conclusion of the argument.\nPremise 1: Whoever is not a great-grandfather of Clyde is a stepbrother of Brian, i.e.,  If X = NOT (great-grandfather(Clyde)), then X = stepbrother(Brian).\nPremise 2: Being an ancestor of Dana is sufficient for not being a great-grandfather of Clyde, i.e.,  If X = ancestor(Dana), X = NOT (great-grandfather(Clyde)).\nConclusion: Everyone who is an ancestor of Dana is a stepbrother of Brian, too, i.e., If X = ancestor(Dana), then X = stepbrother(Brian)?\n\nStep 2: Evaluate the logical flow from premises to conclusion.\nFrom premise 1, we know that if X = ancestor(Dana), X = NOT (great-grandfather(Clyde)).\nFrom premise 2, we know that if X = NOT (great-grandfather(Clyde)), then X = stepbrother(Brian).\nBy the transitive relation rule in first-order logic, we then have: if X = ancestor(Dana), then X = stepbrother(Brian).\n\nStep 3: Determine the validity of the argument.\nGiven the premises, the conclusion logically follows, making the argument deductively valid.\n\nTherefore, the answer is \\boxed{valid}."
            },
            {
                "user": "\"It is not always easy to grasp who is consuming which products. The following argument pertains to this question: Every infrequent user of Paul Mitchell shampoo is either a rare consumer of Nioxin shampoo or a loyal buyer of Caress soap, or both. No regular consumer of Lush soap is a rare consumer of Nioxin shampoo and, in the same time, a loyal buyer of Caress soap. It follows that whoever is an infrequent user of Paul Mitchell shampoo is not a regular consumer of Lush soap.\"\nIs the argument, given the explicitly stated premises, deductively valid or invalid?\nOptions:\n- valid\n- invalid",
                "assistant": "Step 1: Identify the premises and conclusion of the argument.\nPremise 1: Every infrequent user of Paul Mitchell shampoo is either a rare consumer of Nioxin shampoo or a loyal buyer of Caress soap, or both, i.e., If X = infrequent-user(Paul Mitchell), then X = rare-consumer(Nioxin) OR X = loyal-buyer(Caress).\nPremise 2: No regular consumer of Lush soap is a rare consumer of Nioxin shampoo and, at the same time, a loyal buyer of Caress soap, i.e.,  If X = regular-consumer(Lush), then X = NOT (rare-consumer(Nioxin) AND loyal-buyer(Caress)).\nConclusion: Whoever is an infrequent user of Paul Mitchell shampoo is not a regular consumer of Lush soap, i.e., If X = infrequent-user(Paul Mitchell), then X = NOT (regular-consumer(Lush))?\n\nStep 2: Evaluate the logical flow from premises to conclusion.\nFrom premises 1, we have if X = infrequent-user(Paul Mitchell), then X = rare-consumer(Nioxin) OR X = loyal-buyer(Caress). We need to consider both cases separately:\nThe case X = rare-consumer(Nioxin) does not appear in premise 2.\nThe case X = loyal-buyer(Caress) does not appear in premise 2, either.\n\nFrom premise 1, we know that if X = ancestor(Dana), X = NOT (great-grandfather(Clyde)).\nFrom premise 2, we know that if X = NOT (great-grandfather(Clyde)), then X = stepbrother(Brian).\nBy the transitive relation rule in first-order logic, we then have: if X = ancestor(Dana), then X = stepbrother(Brian).\n\nStep 3: Determine the validity of the argument.\nSo, from premise 1 and premise 2, we cannot necessarily deduce the Hypothesis.\n\nTherefore, the answer is \\boxed{invalid}."
            }
        ]
    },
    "geometric_shapes": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Name geometric shapes from their SVG paths.\n\nThis SVG path element <path d=\"M 31.00,73.00 L 32.00,59.00 L 44.00,50.00 L 49.00,41.00 L 64.00,37.00 L 71.00,55.00 L 64.00,76.00 L 52.00,61.00 L 31.00,73.00\"/> draws a\nOptions:\n(A) circle\n(B) heptagon\n(C) hexagon\n(D) kite\n(E) line\n(F) octagon\n(G) pentagon\n(H) rectangle\n(I) sector\n(J) triangle",
                "assistant": "```python\nimport re\nimport math\n\ndef count_points_and_arcs(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the number of points and arcs in the path.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    arcs = re.findall(r'[Aa]', svg_path)\n    return len(points), len(arcs)\n\ndef calculate_sidelengths(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the lengths of the sides of the shape.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    points = [(float(x), float(y)) for x, y in points]\n\n    sidelengths = []\n    for i in range(len(points)):\n        x1, y1 = points[i]\n        x2, y2 = points[(i+1)%len(points)]\n        sidelength = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n        sidelength = round(sidelength, 1)\n        sidelengths.append(sidelength)\n\n    return sidelengths\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    svg_path = \"M 31.00,73.00 L 32.00,59.00 L 44.00,50.00 L 49.00,41.00 L 64.00,37.00 L 71.00,55.00 L 64.00,76.00 L 52.00,61.00 L 31.00,73.00\"\n    num_points, num_arcs = count_points_and_arcs(svg_path)\n    \n    if num_arcs == 0:\n        if num_points == 1:\n            print(\"(E) line\")\n        elif num_points == 3:\n            print(\"(J) triangle\")\n        elif num_points == 4:\n            sidelengths = calculate_sidelengths(svg_path)\n            if sidelengths[0]==sidelengths[1] or sidelengths[1]==sidelengths[2]:\n                print(\"(D) kite\")\n            elif sidelengths[0]==sidelengths[2] or sidelengths[1]==sidelengths[3]:\n                print(\"(H) rectangle\")\n            else:\n                print(\"(K) trapezoid\")\n        elif num_points == 5:\n            print(\"(G) pentagon\")       \n        elif num_points == 6:\n            print(\"(C) hexagon\")\n        elif num_points == 7:\n            print(\"(B) heptagon\")\n        elif num_points == 8:\n            print(\"(F) octagon\")\n        else:\n            print(\"None\")\n    elif num_arcs == 1:\n        if num_points == 0:\n            print(\"(A) circle\")\n        else:\n            print(\"(I) sector\")\n    elif num_arcs == 2:\n            print(\"(K) ellipse\")\n    else:\n        print(\"None\")\n\nmain()\n```\n\nThe answer is \\boxed{(F) octagon}."
            },
            {
                "user": "This SVG path element <path d=\"M 14.19,26.04 L 51.43,39.21 L 58.44,36.69 L 56.63,30.17 L 48.53,26.66 L 14.19,26.04\"/> draws a\nOptions:\n(A) circle\n(B) heptagon\n(C) hexagon\n(D) kite\n(E) line\n(F) octagon\n(G) pentagon\n(H) rectangle\n(I) sector\n(J) triangle",
                "assistant": "```python\nimport re\nimport math\n\ndef count_points_and_arcs(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the number of points and arcs in the path.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    arcs = re.findall(r'[Aa]', svg_path)\n    return len(points), len(arcs)\n\ndef calculate_sidelengths(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the lengths of the sides of the shape.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    points = [(float(x), float(y)) for x, y in points]\n\n    sidelengths = []\n    for i in range(len(points)):\n        x1, y1 = points[i]\n        x2, y2 = points[(i+1)%len(points)]\n        sidelength = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n        sidelength = round(sidelength, 1)\n        sidelengths.append(sidelength)\n\n    return sidelengths\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    svg_path = \"M 14.19,26.04 L 51.43,39.21 L 58.44,36.69 L 56.63,30.17 L 48.53,26.66 L 14.19,26.04\"\n    num_points, num_arcs = count_points_and_arcs(svg_path)\n    \n    if num_arcs == 0:\n        if num_points == 1:\n            print(\"(E) line\")\n        elif num_points == 3:\n            print(\"(J) triangle\")\n        elif num_points == 4:\n            sidelengths = calculate_sidelengths(svg_path)\n            if sidelengths[0]==sidelengths[1] or sidelengths[1]==sidelengths[2]:\n                print(\"(D) kite\")\n            elif sidelengths[0]==sidelengths[2] or sidelengths[1]==sidelengths[3]:\n                print(\"(H) rectangle\")\n            else:\n                print(\"(K) trapezoid\")\n        elif num_points == 5:\n            print(\"(G) pentagon\")       \n        elif num_points == 6:\n            print(\"(C) hexagon\")\n        elif num_points == 7:\n            print(\"(B) heptagon\")\n        elif num_points == 8:\n            print(\"(F) octagon\")\n        else:\n            print(\"None\")\n    elif num_arcs == 1:\n        if num_points == 0:\n            print(\"(A) circle\")\n        else:\n            print(\"(I) sector\")\n    elif num_arcs == 2:\n            print(\"(K) ellipse\")\n    else:\n        print(\"None\")\n\nmain()\n```\n\nThe answer is \\boxed{(G) pentagon}."
            },
            {
                "user": "This SVG path element <path d=\"M 41.00,43.00 L 37.00,34.00 L 41.00,33.00 L 45.00,34.00 L 41.00,43.00\"/> draws a\nOptions:\n(A) circle\n(B) heptagon\n(C) hexagon\n(D) kite\n(E) line\n(F) octagon\n(G) pentagon\n(H) rectangle\n(I) sector\n(J) triangle",
                "assistant": "```python\nimport re\nimport math\n\ndef count_points_and_arcs(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the number of points and arcs in the path.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    arcs = re.findall(r'[Aa]', svg_path)\n    return len(points), len(arcs)\n\ndef calculate_sidelengths(svg_path):\n    \"\"\"\n    This function takes an SVG path as input and returns the lengths of the sides of the shape.\n    \"\"\"\n    points = re.findall(r'L (\\d+.\\d+),(\\d+.\\d+)', svg_path)\n    points = [(float(x), float(y)) for x, y in points]\n\n    sidelengths = []\n    for i in range(len(points)):\n        x1, y1 = points[i]\n        x2, y2 = points[(i+1)%len(points)]\n        sidelength = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n        sidelength = round(sidelength, 1)\n        sidelengths.append(sidelength)\n\n    return sidelengths\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    svg_path = \"M 41.00,43.00 L 37.00,34.00 L 41.00,33.00 L 45.00,34.00 L 41.00,43.00\"\n    num_points, num_arcs = count_points_and_arcs(svg_path)\n    \n    if num_arcs == 0:\n        if num_points == 1:\n            print(\"(E) line\")\n        elif num_points == 3:\n            print(\"(J) triangle\")\n        elif num_points == 4:\n            sidelengths = calculate_sidelengths(svg_path)\n            if sidelengths[0]==sidelengths[1] or sidelengths[1]==sidelengths[2]:\n                print(\"(D) kite\")\n            elif sidelengths[0]==sidelengths[2] or sidelengths[1]==sidelengths[3]:\n                print(\"(H) rectangle\")\n            else:\n                print(\"(K) trapezoid\")\n        elif num_points == 5:\n            print(\"(G) pentagon\")       \n        elif num_points == 6:\n            print(\"(C) hexagon\")\n        elif num_points == 7:\n            print(\"(B) heptagon\")\n        elif num_points == 8:\n            print(\"(F) octagon\")\n        else:\n            print(\"None\")\n    elif num_arcs == 1:\n        if num_points == 0:\n            print(\"(A) circle\")\n        else:\n            print(\"(I) sector\")\n    elif num_arcs == 2:\n            print(\"(K) ellipse\")\n    else:\n        print(\"None\")\n\nmain()\n```\n\nThe answer is \\boxed{(D) kite}."
            }
        ]
    },
    "hyperbaton": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Order adjectives correctly in English sentences.\n\nWhich sentence has the correct adjective order:\nOptions:\n(A) rubber terrible ship\n(B) terrible rubber ship",
                "assistant": "Step 1: Understand the rule for adjective order in English.\nIn English, adjectives generally follow this order: \"[1. opinion] [2. size] [3. age] [4. shape] [5. color] [6. origin] [7. material] [8. purpose] noun\".\n\nStep 2: Apply the rule to the given options.\n\n(A) \"rubber terrible ship\" - Here, 'rubber' (material) is placed before 'terrible' (opinion). Option (A) has the following adjective order: [7. material] [1. opinion]. Because 7 < 1 is not correct, (A) does not have the correct ordering.\n(B) \"terrible rubber ship\" - Here, 'terrible' (opinion) is placed before 'rubber' (material). Option (B) has the following adjective order: [1. opinion] [7. material]. Because 1 < 7 is correct, (B) has the correct ordering.\n\nStep 3: Choose the sentence with the correct adjective order.\nThe sentence with the correct adjective order is (B) .\n\nTherefore, the answer is \\boxed{(B)}."
            },
            {   
                "user": "Which sentence has the correct adjective order:\nOptions:\n(A) repulsive small Brazilian exercise ship\n(B) Brazilian repulsive exercise small ship",
                "assistant": "Step 1: Understand the rule for adjective order in English.\nIn English, adjectives generally follow this order: \"[1. opinion] [2. size] [3. age] [4. shape] [5. color] [6. origin] [7. material] [8. purpose] noun\".\n\nStep 2: Apply the rule to the given options.\n(A) \"repulsive small Brazilian exercise ship\" - Here, \"repulsive\" falls into the opinion category. \"small\" falls into the size category. \"Brazilian\" falls into the origin category. \"exercise\" falls into the purpose category. Option (A) has the following adjective order: [1. opinion] [2. size] [6. origin] [8. purpose]. Because 1 < 2 < 6 < 8 is correct, (A) has the correct ordering.\n(B) \"Brazilian repulsive exercise small ship\" - Here, Option (B) has the following adjective order: [6. origin] [1. opinion] [8. purpose] [2. size]. Because 6 < 1 < 8 < 2 is not correct, (B) does not have the correct ordering.\n\nStep 3: Choose the sentence with the correct adjective order.\nThe sentence with the correct adjective order is (A) .\n\nTherefore, the answer is \\boxed{(A)}."
            },
            {
                "user": "Which sentence has the correct adjective order:\nOptions:\n(A) blue gold wonderful square shoe\n(B) wonderful square blue gold shoe",
                "assistant": "Step 1: Understand the rule for adjective order in English.\nIn English, adjectives generally follow this order: \"[1. opinion] [2. size] [3. age] [4. shape] [5. color] [6. origin] [7. material] [8. purpose] noun\".\n\nStep 2: Apply the rule to the given options.\n(A) \"blue gold wonderful square shoe\" - Here, \"blue\" falls into the color category. \"gold\" falls into the material category. \"wonderful\" falls into the opinion category. \"square\" falls into the shape category. The adjective order that Option (A) has is [5. color] [7. material] [1. opinion] [4. shape]. Because 5 < 7 < 1 < 4 is not correct, (A) does not have the correct ordering.\n(B) \"wonderful square blue gold shoe\" - Here, Option (B) has the following adjective order: [1. opinion] [4. shape] [5. color] [7. material]. Because 1 < 4 < 5 < 7 is correct, (B) has the correct ordering.\n\nStep 3: Choose the sentence with the correct adjective order.\nThe sentence with the correct adjective order is (B) .\n\nTherefore, the answer is \\boxed{(B)}."
            }
        ]
    },
    "logical_deduction_five_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A logical deduction task which requires deducing the order of a sequence of objects.\n\nThe following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. In a golf tournament, there were three golfers: Amy, Eli, and Eve. Eve finished above Amy. Eli finished below Amy.\nOptions:\n(A) Amy finished last\n(B) Eli finished last\n(C) Eve finished last",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of participants satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'finished_above':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n    return True\n\ndef find_order(participants, constraints):\n    \"\"\"\n    This function finds the correct order of participants that satisfies the constraints.\n    \"\"\"\n    for order in permutations(participants):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    participants = ['Amy', 'Eli', 'Eve']\n    constraints = [('finished_above', 'Eve', 'Amy'), ('finished_above', 'Amy', 'Eli')]\n    options = {'Amy': '(A)', 'Eli': '(B)', 'Eve': '(C)'}\n    order = find_order(participants, constraints)\n    print(options[order[-1]])\n\nmain()\n```\n\nThe answer is \\boxed{(B)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a white book, a green book, and an orange book. The green book is to the right of the white book. The orange book is the rightmost.\nOptions:\n(A) The white book is the leftmost\n(B) The green book is the leftmost\n(C) The orange book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'right_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'rightmost':\n            if order.index(constraint[1]) != len(order) - 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['White', 'Green', 'Orange']\n    constraints = [('right_of', 'White', 'Green'), ('rightmost', 'Orange',)]\n    options = {'White': '(A)', 'Green': '(B)', 'Orange': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a red book, a gray book, and a white book. The white book is to the left of the gray book. The red book is the second from the left.\nOptions:\n(A) The red book is the leftmost\n(B) The gray book is the leftmost\n(C) The white book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'left_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'second_from_left':\n            if order.index(constraint[1]) != 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['Red', 'Gray', 'White']\n    constraints = [('left_of', 'White', 'Gray'), ('second_from_left', 'Red',)]\n    options = {'Red': '(A)', 'Gray': '(B)', 'White': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "logical_deduction_seven_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A logical deduction task which requires deducing the order of a sequence of objects.\n\nThe following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. In a golf tournament, there were three golfers: Amy, Eli, and Eve. Eve finished above Amy. Eli finished below Amy.\nOptions:\n(A) Amy finished last\n(B) Eli finished last\n(C) Eve finished last",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of participants satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'finished_above':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n    return True\n\ndef find_order(participants, constraints):\n    \"\"\"\n    This function finds the correct order of participants that satisfies the constraints.\n    \"\"\"\n    for order in permutations(participants):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    participants = ['Amy', 'Eli', 'Eve']\n    constraints = [('finished_above', 'Eve', 'Amy'), ('finished_above', 'Amy', 'Eli')]\n    options = {'Amy': '(A)', 'Eli': '(B)', 'Eve': '(C)'}\n    order = find_order(participants, constraints)\n    print(options[order[-1]])\n\nmain()\n```\n\nThe answer is \\boxed{(B)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a white book, a green book, and an orange book. The green book is to the right of the white book. The orange book is the rightmost.\nOptions:\n(A) The white book is the leftmost\n(B) The green book is the leftmost\n(C) The orange book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'right_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'rightmost':\n            if order.index(constraint[1]) != len(order) - 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['White', 'Green', 'Orange']\n    constraints = [('right_of', 'White', 'Green'), ('rightmost', 'Orange',)]\n    options = {'White': '(A)', 'Green': '(B)', 'Orange': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a red book, a gray book, and a white book. The white book is to the left of the gray book. The red book is the second from the left.\nOptions:\n(A) The red book is the leftmost\n(B) The gray book is the leftmost\n(C) The white book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'left_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'second_from_left':\n            if order.index(constraint[1]) != 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['Red', 'Gray', 'White']\n    constraints = [('left_of', 'White', 'Gray'), ('second_from_left', 'Red',)]\n    options = {'Red': '(A)', 'Gray': '(B)', 'White': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "logical_deduction_three_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A logical deduction task which requires deducing the order of a sequence of objects.\n\nThe following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. In a golf tournament, there were three golfers: Amy, Eli, and Eve. Eve finished above Amy. Eli finished below Amy.\nOptions:\n(A) Amy finished last\n(B) Eli finished last\n(C) Eve finished last",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of participants satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'finished_above':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n    return True\n\ndef find_order(participants, constraints):\n    \"\"\"\n    This function finds the correct order of participants that satisfies the constraints.\n    \"\"\"\n    for order in permutations(participants):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    participants = ['Amy', 'Eli', 'Eve']\n    constraints = [('finished_above', 'Eve', 'Amy'), ('finished_above', 'Amy', 'Eli')]\n    options = {'Amy': '(A)', 'Eli': '(B)', 'Eve': '(C)'}\n    order = find_order(participants, constraints)\n    print(options[order[-1]])\n\nmain()\n```\n\nThe answer is \\boxed{(B)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a white book, a green book, and an orange book. The green book is to the right of the white book. The orange book is the rightmost.\nOptions:\n(A) The white book is the leftmost\n(B) The green book is the leftmost\n(C) The orange book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'right_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'rightmost':\n            if order.index(constraint[1]) != len(order) - 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['White', 'Green', 'Orange']\n    constraints = [('right_of', 'White', 'Green'), ('rightmost', 'Orange',)]\n    options = {'White': '(A)', 'Green': '(B)', 'Orange': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "The following paragraphs each describe a set of three objects arranged in a fixed order. The statements are logically consistent within each paragraph. On a shelf, there are three books: a red book, a gray book, and a white book. The white book is to the left of the gray book. The red book is the second from the left.\nOptions:\n(A) The red book is the leftmost\n(B) The gray book is the leftmost\n(C) The white book is the leftmost",
                "assistant": "```python\nfrom itertools import permutations\n\ndef check_constraints(order, constraints):\n    \"\"\"\n    This function checks if the given order of objects satisfies the constraints.\n    \"\"\"\n    for constraint in constraints:\n        if constraint[0] == 'left_of':\n            if order.index(constraint[1]) > order.index(constraint[2]):\n                return False\n        if constraint[0] == 'second_from_left':\n            if order.index(constraint[1]) != 1:\n                return False\n    return True\n\ndef find_order(objects, constraints):\n    \"\"\"\n    This function finds the correct order of objects that satisfies the constraints.\n    \"\"\"\n    for order in permutations(objects):\n        if check_constraints(order, constraints):\n            return order\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    objects = ['Red', 'Gray', 'White']\n    constraints = [('left_of', 'White', 'Gray'), ('second_from_left', 'Red',)]\n    options = {'Red': '(A)', 'Gray': '(B)', 'White': '(C)'}\n    order = find_order(objects, constraints)\n    leftmost = order[0]\n    print(options[leftmost])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "movie_recommendation": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Recommend movies similar to the given list of movies.\n\nFind a movie similar to Star Wars Episode IV - A New Hope, Indiana Jones and the Last Crusade, Star Wars Episode V - The Empire Strikes Back, The Big Lebowski:\nOptions:\n(A) Tetsuo\n(B) the Ironman\n(C) The Princess Bride\n(D) The Barkley Marathons The Race That Eats Its Young\n(E) Bug",
                "assistant": "Step 1: Recall the infomation of the given movies.\n- Star Wars Episode IV - A New Hope (action, adventure, fantasy; 1977)\n- Indiana Jones and the Last Crusade (action, adventure; 1989)\n- Star Wars Episode V - The Empire Strikes Back (action, adventure, fantasy; 1980)\n- The Big Lebowski (action, drama, comedy; 1998)\nThese are all famous classic American movies produced before 2000.\n\nStep 2: Select the most similar movie from the options\nAmongst all the options, the only movie similar to these ones seems to be (C) The Princess Bride (1987).\n\nTherefore, the answer is \\boxed{(C)}."
            },
            {
                "user": "Find a movie similar to Twister, The Silence of the Lambs, Independence Day, Braveheart:\nOptions:\n(A) They Shoot Horses\n(B) Don't They\n(C) Forrest Gump\n(D) The Salton Sea\n(E) Extreme Days",
                "assistant": "Step 1: Recall the infomation of the given movies.\n- Twister (action, adventure, thriller; 1996)\n- The Silence of the Lambs (crime, drama, thriller; 1991)\n- Independence Day (action, science-fiction, drama; 1996)\n- Braveheart (biography, drama, epic; 1995)\nThese are all famous Hollywood movies produced around the 1990s.\n\nStep 2: Select the most similar movie from the options\nAmongst all the options, the only movie similar to these ones seems to be (C) Forrest Gump (comedy, drama, romance; 1994).\n\nTherefore, the answer is \\boxed{(C)}."
            },
            {
                "user": "Find a movie similar to Minority Report, Total Recall, Inside Out, Forrest Gump:\nOptions:\n(A) Phenomena\n(B) Lilting\n(C) Catwoman\n(D) Edge of Tomorrow",
                "assistant": "Step 1: Recall the infomation of the given movies.\n- Minority Report (action, crime, mystery; 2002)\n- Total Recall (action, adventure, science-fiction; 2012)\n- Inside Out (animation, family, comedy; 2015)\n- Forrest Gump (comedy, drama, romance; 1994)\nThese are all famous movies produced in the past few decades.\n\nStep 2: Select the most similar movie from the options\nAmongst all the options, the only movie similar to these ones seems to be (D) Edge of Tomorrow (action, adventure, crime, mystery; 2014), as it is also a science-fiction movie and features Tom Cruise.\n\nTherefore, the answer is \\boxed{(D)}."
            }
        ]
    },
    "multistep_arithmetic_two": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Solve multi-step arithmetic problems.\n\n((-5 + 9 * -4 - 0) * (4 + -7 + 0 * -5)) =",
                "assistant": "```python\ndef calculate_expression(expression):\n    \"\"\"\n    This function takes an arithmetic expression as a string, evaluates it and returns the result.\n    \"\"\"\n    return eval(expression)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"((-5 + 9 * -4 - 0) * (4 + -7 + 0 * -5))\"\n    result = calculate_expression(expression)\n    print(result)\n\nmain()\n```\n\nThe answer is \\boxed{123}."
            },
            {
                "user": "((-9 * 7 * 7 * -9) + (4 * -9 - 8 - -4)) =",
                "assistant": "```python\ndef calculate_expression(expression):\n    \"\"\"\n    This function takes an arithmetic expression as a string, evaluates it and returns the result.\n    \"\"\"\n    return eval(expression)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"((-9 * 7 * 7 * -9) + (4 * -9 - 8 - -4))\"\n    result = calculate_expression(expression)\n    print(result)\n\nmain()\n```\n\nThe answer is \\boxed{3929}."
            },
            {
                "user": "((-3 + 5 * 8 * -4) - (9 - 8 * -7 + -9)) =",
                "assistant": "```python\ndef calculate_expression(expression):\n    \"\"\"\n    This function takes an arithmetic expression as a string, evaluates it and returns the result.\n    \"\"\"\n    return eval(expression)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    expression = \"((-3 + 5 * 8 * -4) - (9 - 8 * -7 + -9))\"\n    result = calculate_expression(expression)\n    print(result)\n\nmain()\n```\n\nThe answer is \\boxed{-219}."
            }
        ]
    },
    "navigate": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Given a series of navigation instructions, determine whether one would end up back at the starting point.\n\nIf you follow these instructions, do you return to the starting point? Turn left. Turn around. Turn left. Take 7 steps. Take 2 steps. Take 4 steps. Take 8 steps.\nOptions:\n- Yes\n- No",
                "assistant": "```python\ndef follow_instructions(instructions):\n    \"\"\"\n    This function takes a list of instructions and returns the final position relative to the starting point.\n    direction 0: north, 1: east, 2: south, 3: west\n    \"\"\"\n    direction = 0\n    position = [0, 0]\n    for instruction in instructions:\n        if instruction[0] == 'left':\n            direction = (direction - 1) % 4\n        elif instruction[0] == 'right':\n            direction = (direction + 1) % 4\n        elif instruction[0] == 'around':\n            direction = (direction + 2) % 4\n        elif instruction[0] == 'forward':\n            if direction == 0:\n                position[1] += instruction[1]\n            elif direction == 1:\n                position[0] += instruction[1]\n            elif direction == 2:\n                position[1] -= instruction[1]\n            elif direction == 3:\n                position[0] -= instruction[1]\n    return position\n    \ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    instructions = [('left', 0), ('around', 0), ('left', 0), ('forward', 7), ('forward', 2), ('forward', 4), ('forward', 8)]\n    position = follow_instructions(instructions)\n    if position == [0, 0]:\n        print('Yes')\n    else:\n        print('No')\n        \nmain()\n```\n\nThe answer is \\boxed{No}."
            },
            {
                "user": "If you follow these instructions, do you return to the starting point? Turn around. Take 1 step. Take 6 steps. Turn around. Take 6 steps. Take 9 steps. Take 1 step.\nOptions:\n- Yes\n- No",
                "assistant": "```python\ndef follow_instructions(instructions):\n    \"\"\"\n    This function takes a list of instructions and returns the final position.\n    position 1 for forward, -1 for backward\n    \"\"\"\n    position = 0\n    direction = 1\n    for instruction in instructions:\n        if instruction == 'Turn around':\n            direction *= -1\n        else:\n            position += direction * instruction\n    return position\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    instructions = ['Turn around', 1, 6, 'Turn around', 6, 9, 1]\n    position = follow_instructions(instructions)\n    if position == 0:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n```\n\nThe answer is \\boxed{No}."
            },
            {
                "user": "If you follow these instructions, do you return to the starting point? Always face forward. Take 2 steps right. Take 9 steps left. Take 7 steps right.\nOptions:\n- Yes\n- No",
                "assistant": "```python\ndef calculate_position(instructions):\n    \"\"\"\n    This function takes a list of instructions, where each instruction is a tuple containing a direction ('right' or 'left')  and a number of steps.\n    \"\"\"\n    position = 0\n    for direction, steps in instructions:\n        if direction == 'right':\n            position += steps\n        elif direction == 'left':\n            position -= steps\n    return position\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    instructions = [('right', 2), ('left', 9), ('right', 7)]\n    position = calculate_position(instructions)\n    if position == 0:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n```\n\nThe answer is \\boxed{Yes}."
            }
        ]
    },
    "object_counting": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Questions that involve enumerating objects and asking the model to count them.\n\nI have a blackberry, a clarinet, a nectarine, a plum, a strawberry, a banana, a flute, an orange, and a violin. How many fruits do I have?",
                "assistant": "```python\ndef is_fruit(item):\n    \"\"\"\n    This function checks if a given item is a fruit.\n    The list of fruits is predefined within the function.\n    \"\"\"\n    fruit_list = ['blackberry', 'nectarine', 'plum', 'strawberry', 'banana', 'orange']\n    return item in fruit_list\n\ndef count_fruits(items):\n    \"\"\"\n    This function counts the number of fruits in a list of items.\n    Each item is represented as a tuple with the item name and the quantity.\n    It uses the is_fruit function to check if each item is a fruit.\n    \"\"\"\n    fruit_count = 0\n    for item, quantity in items:\n        if is_fruit(item):\n            fruit_count += quantity\n    return fruit_count\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    items = [('blackberry', 1), ('clarinet', 1), ('nectarine', 1), ('plum', 1), ('strawberry', 1), ('banana', 1), ('flute', 1), ('orange', 1), ('violin', 1)]\n    num_fruits = count_fruits(items)\n    print(num_fruits)\n\nmain()\n```\n\nThe answer is \\boxed{6}."
            },
            {
                "user": "I have an orange, a raspberry, two peaches, a blackberry, an apple, a grape, a nectarine, and three plums. How many fruits do I have?",
                "assistant": "```python\ndef is_fruit(item):\n    \"\"\"\n    This function checks if a given item is a fruit.\n    The list of fruits is predefined within the function.\n    \"\"\"\n    fruit_list = ['orange', 'raspberry', 'peach', 'blackberry', 'apple', 'grape', 'nectarine', 'plum']\n    return item in fruit_list\n\ndef count_fruits(items):\n    \"\"\"\n    This function counts the number of fruits in a list of items.\n    Each item is represented as a tuple with the item name and the quantity.\n    It uses the is_fruit function to check if each item is a fruit.\n    \"\"\"\n    fruit_count = 0\n    for item, quantity in items:\n        if is_fruit(item):\n            fruit_count += quantity\n    return fruit_count\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    items = [('orange', 1), ('raspberry', 1), ('peach', 2), ('blackberry', 1), ('apple', 1), ('grape', 1), ('nectarine', 1), ('plum', 3)]\n    num_fruits = count_fruits(items)\n    print(num_fruits)\n\nmain()\n```\n\nThe answer is \\boxed{11}."
            },
            {
                "user": "I have a lettuce head, a head of broccoli, an onion, a stalk of celery, two carrots, a garlic, and a yam. How many vegetables do I have?",
                "assistant": "```python\ndef is_vegetable(item):\n    \"\"\"\n    This function checks if a given item is a vegetable.\n    The list of vegetables is predefined within the function.\n    \"\"\"\n    vegetable_list = ['lettuce head', 'head of broccoli', 'onion', 'stalk of celery', 'carrot', 'garlic', 'yam']\n    return item in vegetable_list\n\ndef count_vegetables(items):\n    \"\"\"\n    This function counts the number of vegetables in a list of items.\n    Each item is represented as a tuple with the item name and the quantity.\n    It uses the is_vegetable function to check if each item is a vegetable.\n    \"\"\"\n    vegetable_count = 0\n    for item, quantity in items:\n        if is_vegetable(item):\n            vegetable_count += quantity\n    return vegetable_count\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    items = [('lettuce head', 1), ('head of broccoli', 1), ('onion', 1), ('stalk of celery', 1), ('carrot', 2), ('garlic', 1), ('yam', 1)]\n    num_vegetables = count_vegetables(items)\n    print(num_vegetables)\n\nmain()\n```\n\nThe answer is \\boxed{8}."
            }
        ]
    },
    "penguins_in_a_table": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Answer questions about a table of penguins and their attributes.\n\nHere is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  We now add a penguin to the table:\nJames, 12, 90, 12\nHow many penguins are less than 8 years old?\nOptions:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5",
                "assistant": "```python\ndef count_penguins_less_than_age(penguins, age):\n    \"\"\"\n    This function counts the number of penguins in a list that are less than a given age.\n    Each penguin is represented as a dictionary with keys 'name', 'age', 'height', and 'weight'.\n    \"\"\"\n    count = 0\n    for penguin in penguins:\n        if penguin['age'] < age:\n            count += 1\n    return count\n\ndef select_answer(count):\n    \"\"\"\n    This function takes a count and returns the corresponding option.\n    \"\"\"\n    options = ['(A)', '(B)', '(C)', '(D)', '(E)']\n    return options[count-1]\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    penguins = [\n        {'name': 'Louis', 'age': 7, 'height': 50, 'weight': 11},\n        {'name': 'Bernard', 'age': 5, 'height': 80, 'weight': 13},\n        {'name': 'Vincent', 'age': 9, 'height': 60, 'weight': 11},\n        {'name': 'Gwen', 'age': 8, 'height': 70, 'weight': 15},\n        {'name': 'James', 'age': 12, 'height': 90, 'weight': 12}\n    ]\n    age = 8\n    count = count_penguins_less_than_age(penguins, age)\n    answer = select_answer(count)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{(B)}."
            },
            {
                "user": "Here is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  Which is the youngest penguin?\nOptions:\n(A) Louis\n(B) Bernard\n(C) Vincent\n(D) Gwen\n(E) James",
                "assistant": "```python\ndef find_youngest_penguin(penguins):\n    \"\"\"\n    This function finds the youngest penguin in a list.\n    Each penguin is represented as a dictionary with keys 'name', 'age', 'height', and 'weight'.\n    \"\"\"\n    youngest_penguin = min(penguins, key=lambda penguin: penguin['age'])\n    return youngest_penguin['name']\n\ndef select_answer(name):\n    \"\"\"\n    This function takes a penguin's name and returns the corresponding option.\n    \"\"\"\n    options = {'Louis': '(A)', 'Bernard': '(B)', 'Vincent': '(C)', 'Gwen': '(D)', 'James': '(E)'}\n    return options[name]\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    penguins = [\n        {'name': 'Louis', 'age': 7, 'height': 50, 'weight': 11},\n        {'name': 'Bernard', 'age': 5, 'height': 80, 'weight': 13},\n        {'name': 'Vincent', 'age': 9, 'height': 60, 'weight': 11},\n        {'name': 'Gwen', 'age': 8, 'height': 70, 'weight': 15}\n    ]\n    name = find_youngest_penguin(penguins)\n    answer = select_answer(name)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{(B)}."
            },
            {
                "user": "Here is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  What is the name of the second penguin sorted by alphabetic order?\nOptions:\n(A) Louis\n(B) Bernard\n(C) Vincent\n(D) Gwen\n(E) James",
                "assistant": "```python\ndef sort_penguins_by_name(penguins):\n    \"\"\"\n    This function sorts a list of penguins by their names in alphabetical order.\n    Each penguin is represented as a dictionary with keys 'name', 'age', 'height', and 'weight'.\n    \"\"\"\n    sorted_penguins = sorted(penguins, key=lambda penguin: penguin['name'])\n    return sorted_penguins\n\ndef select_answer(name):\n    \"\"\"\n    This function takes a penguin's name and returns the corresponding option.\n    \"\"\"\n    options = {'Louis': '(A)', 'Bernard': '(B)', 'Vincent': '(C)', 'Gwen': '(D)', 'James': '(E)'}\n    return options[name]\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    penguins = [\n        {'name': 'Louis', 'age': 7, 'height': 50, 'weight': 11},\n        {'name': 'Bernard', 'age': 5, 'height': 80, 'weight': 13},\n        {'name': 'Vincent', 'age': 9, 'height': 60, 'weight': 11},\n        {'name': 'Gwen', 'age': 8, 'height': 70, 'weight': 15}\n    ]\n    sorted_penguins = sort_penguins_by_name(penguins)\n    second_penguin_name = sorted_penguins[1]['name']\n    answer = select_answer(second_penguin_name)\n    print(answer)\n\nmain()\n```\n\nThe answer is \\boxed{(D)}."
            }
        ]
    },
    "reasoning_about_colored_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Answer extremely simple questions about the colors of objects on a surface.\n\nOn the nightstand, there is a red pencil, a purple mug, a burgundy keychain, a fuchsia teddy bear, a black plate, and a blue stress ball. What color is the stress ball?\nOptions:\n(A) red\n(B) orange\n(C) yellow\n(D) green\n(E) blue\n(F) brown\n(G) magenta\n(H) fuchsia\n(I) mauve\n(J) teal\n(K) turquoise\n(L) burgundy\n(M) silver\n(N) gold\n(O) black\n(P) grey\n(Q) purple\n(R) pink",
                "assistant": "Step 1: List objects from left to right.\nThe objects are arranged in a row, from left to right, as follows: (1) a red pencil, (2) a purple mug, (3) a burgundy keychain, (4) a fuchsia teddy bear, (5) a black plate, and (6) a blue stress ball.\n\nStep 2: Determine the color of the stress ball.\nThe stress ball is the object (6) a blue stress ball. The color is blue.\n\nStep 3: Select the option.\nAmong all the options, option (E) is blue.\n\nTherefore, the answer is \\boxed{(E)}."
            },
            {
                "user": "On the table, you see a bunch of objects arranged in a row: a purple paperclip, a pink stress ball, a brown keychain, a green scrunchiephone charger, a mauve fidget spinner, and a burgundy pen. What is the color of the object directly to the right of the stress ball?\nOptions:\n(A) red\n(B) orange\n(C) yellow\n(D) green\n(E) blue\n(F) brown\n(G) magenta\n(H) fuchsia\n(I) mauve\n(J) teal\n(K) turquoise\n(L) burgundy\n(M) silver\n(N) gold\n(O) black\n(P) grey\n(Q) purple\n(R) pink",
                "assistant": "Step 1: List objects from left to right.\nThe objects are arranged in a row, from left to right, as follows: (1) a purple paperclip, (2) a pink stress ball, (3) a brown keychain, (4) a green scrunchiephone charger, (5) a mauve fidget spinner, (6) a burgundy pen.\n\nStep 2: Determine the object directly to the right of the stress ball.\nThe stress ball is the second object on the list, namely (2). The object that is to the right of the stress ball corresponds to (3), which is a brown keychain.\n\nStep 3: Determine the color of the target object.\nThe color of (3) a brown keychain is brown.\n\nStep 4: Select the option.\nAmong all the options, option (F) is brown.\n\nTherefore, the answer is \\boxed{(F)}."
            },
            {
                "user": "On the nightstand, you see the following items arranged in a row: a teal plate, a burgundy keychain, a yellow scrunchiephone charger, an orange mug, a pink notebook, and a grey cup. How many non-orange items do you see to the left of the teal item?\nOptions:\n(A) zero\n(B) one\n(C) two\n(D) three\n(E) four\n(F) five\n(G) six",
                "assistant": "tep 1: List objects from left to right.\nThe objects are arranged in a row, from left to right, as follows: (1) a teal plate, (2) a burgundy keychain, (3) a yellow scrunchiephone charger, (4) an orange mug, (5) a pink notebook, (6) a grey cup.\n\nStep 2: Determine the objects to the left of the teal item.\nThe teal plate is the first item, namely (1). There is no item to the left of the teal item.\n\nStep 3: Determine the number of non-orange items to the left of the teal item.\nSince there is no item to the left of the teal item, the number of non-orange items to the left of the teal item is zero.\n\nStep 4: Select the option.\nAmong all the options, option (A) is zero.\n\nTherefore, the answer is \\boxed{(A)}."
            }
        ]
    },
    "ruin_names": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Select the humorous edit that 'ruins' the input movie or musical artist name.\n\nWhich of the following is a humorous edit of this artist or movie name: 'whitesnake'?\nOptions:\n(A) whitesnape\n(B) whitesnapke\n(C) whitesnuake\n(D) mwhitesnake",
                "assistant": "Step 1: Identify the humorous edit.\nThe task is to find a humorous edit of the artist name 'whitesnake'. This is the name of an old English hard rock band. It is a compound word, formed by the words \"white\" and \"snake\".\n\n\nStep 2: Evaluate each option.\n(A) \"whitesnape\": It is formed by the combination of \"white\" and \"snake\"; therefore, \"snake\" has been changed to \"snape\". Snape makes a reference to the fictional character Severus Snape in the Harry Potter series, so (A) is indeed a meaningful and funny edit.\n(B) \"whitesnapke\": It is formed by the combination of \"white\" and \"snapke\", but \"snapke\" is not an actual word; therefore, \"whitesnapke\" is not humorous.\n(C) \"whitesnuake\": It is formed by the combination of \"white\" and \"snuake\", but \"snuake\" is not an actual word; therefore, \"whitesnuake\" is not humorous.\n(D) \"mwhitesnake\": It is formed by the combination of \"m\", \"white\", and \"snake\", but the prefix \"-m \"seems arbitrary; therefore, \"mwhitesnake\" is not meaningful or humorous.\n\nStep 3: Select the humorous edit.\nOption (A) is the only one that creates a humorous edit by referencing a popular character.\n\nTherefore, the answer is \\boxed{(A)}."
            },
            {
                "user": "Which of the following is a humorous edit of this artist or movie name: 'one of our dinosaurs is missing'?\nOptions:\n(A) ofne of our dinosaurs is missing\n(B) one af our dinosaurs is missing\n(C) one of our dinosaurs is pissing\n(D) one of our dinosaur is missing",
                "assistant": "Step 1: Identify the humorous edit.\nThe task is to find a humorous edit that 'ruins' the original movie name 'one of our dinosaurs is missing'.\n\nStep 2: Evaluate each option.\n(A) \"ofne of our dinosaurs is missing\": Here \"one of\" is changed to \"ofne\", but the word \"ofne\" is not an actual word.\n(B) \"one af our dinosaurs is missing\": Here the word \"of\" is changed to \"af\", but the word \"af\" is not an actual word.\n(C) \"one of our dinosaurs is pissing\": Here the word \"missing\" is changed to \"pissing\", and \"one of our dinosaurs is pissing\" is indeed a very whimsical and mischievous edit. This change truly ruins the original title of the movie.\n(D) \"one of our dinosaur is missing\": Here the word \"dinosaurs\" is changed to \"dinosaur\", but \"dinosaur\" is singular but should be plural in the title; this change therefore feels arbitrary and not humorous.\n\nStep 3: Select the humorous edit.\nOption (C) 'one of our dinosaurs is pissing' is the humorous edit that 'ruins' the original movie name.\n\nTherefore, the answer is \\boxed{(C)}."
            },
            {
                "user": "Which of the following is a humorous edit of this artist or movie name: 'counting crows'?\nOptions:\n(A) countingy crows\n(B) counting cows\n(C) courting crows\n(D) coutnting crows",
                "assistant": "Step 1: Identify the humorous edit.\nThe task is to find a humorous edit of the artist name 'counting crows'.\nThis is the name of an American rock band. Historically, the band name comes from the British nursery rhyme \"One for Sorrow\", which is about counting of magpies.\n\nStep 2: Evaluate each option.\n(A) \"countingy crows\": Here the word \"counting\" is changed to \"countingy\", but the word \"countingy\" is not an actual word.\n(B) \"counting cows\": Here the word \"crows\" is changed to \"cows\", and this is indeed a playful and meaningful edit that ruins the original name of the band.\n(C) \"courting crows\": Here the word \"counting\" is changed to \"courting\", and \"courting\" is an actual word; however, \"courting crows\" does not sound as humorous as \"counting cows\".\n(D) \"coutnting crows\": Here the word \"counting\" is changed to \"coutnting\", but the word \"coutnting\" is not an actual word.\n\nStep 3: Select the most humorous edit.\nThe most humorous edit is the one that changes 'counting crows' to 'counting cows'.\n\nTherefore, the answer is \\boxed{(B)}."
            }
        ]
    },
    "salient_translation_error_detection": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Detect the type of error in an English translation of a German source sentence.\n\nThe following translations from German to English contain a particular error. That error will be one of the following types: Named Entities: An entity (names, places, locations, etc.) is changed to a different entity. Numerical Values: Numerical values (ordinals or cardinals), dates, and/or units are changed. Modifiers or Adjectives: The modifiers and adjectives pertaining to a noun are changed. Negation or Antonyms: Introduce or remove a negation or change comparatives to their antonyms. Facts: Trivial factual errors not pertaining to the above classes are introduced in the translations. Dropped Content: A significant clause in the translation is removed. Please identify that error.  Source: In der Liste der Baudenkmale in Lenzen (Elbe) sind alle Baudenkmale der brandenburgischen Stadt Lenzen (Elbe) und ihrer Ortsteile aufgelistet.\nTranslation: In the list of architectural monuments in Lenzen all architectural monuments of the Brandenburg city of Lenzen and its districts are listed.\nThe translation contains an error pertaining to\nOptions:\n(A) Modifiers or Adjectives\n(B) Numerical Values\n(C) Negation or Antonyms\n(D) Named Entities\n(E) Dropped Content\n(F) Facts",
                "assistant": "Step 1: Identify the entities in the source and translated sentences.\nIn the source sentence, the entity is \"Lenzen (Elbe)\".\nIn the translated sentence, the entity is \"Lenzen\".\n\nStep 2: Compare the entities in the source and translated sentences.\nThe source sentence refers to \"Lenzen (Elbe)\", while the translated sentence refers to \"Lenzen\".\n\nStep 3: Identify the type of error.\nThe error is a change in the named entity from \"Lenzen (Elbe)\" in the source sentence to \"Lenzen\" in the translated sentence.\n\nTherefore, the answer is \\boxed{(D)}."
            },
            {
                "user": "The following translations from German to English contain a particular error. That error will be one of the following types: Named Entities: An entity (names, places, locations, etc.) is changed to a different entity. Numerical Values: Numerical values (ordinals or cardinals), dates, and/or units are changed. Modifiers or Adjectives: The modifiers and adjectives pertaining to a noun are changed. Negation or Antonyms: Introduce or remove a negation or change comparatives to their antonyms. Facts: Trivial factual errors not pertaining to the above classes are introduced in the translations. Dropped Content: A significant clause in the translation is removed. Please identify that error.  Source: Auf dieser Seite sind die Baudenkm\u00e4ler der oberbayerischen Gro\u00dfen Kreisstadt Landsberg am Lech zusammengestellt.\nTranslation: On this page are compiled the architectural monuments of the town of Landsberg am Lech.\nThe translation contains an error pertaining to\nOptions:\n(A) Modifiers or Adjectives\n(B) Numerical Values\n(C) Negation or Antonyms\n(D) Named Entities\n(E) Dropped Content\n(F) Facts",
                "assistant": "Step 1: Identify the information in the source sentence.\nThe source sentence mentions that the architectural monuments are from the \"oberbayerischen Gro\u00dfen Kreisstadt Landsberg am Lech\", which translates to the \"Upper Bavarian large district town Landsberg am Lech\".\n\nStep 2: Compare the information in the source sentence with the translation.\nThe translation mentions the architectural monuments of the \"town of Landsberg am Lech\", omitting the detail that it is an \"Upper Bavarian large district town\".\n\nStep 3: Identify the type of error.\nThe error is that a significant clause, \"Upper Bavarian large district town\", is removed in the translation.\n\nTherefore, the translation contains an error pertaining to \\boxed{(E)}."
            },
            {
                "user": "The following translations from German to English contain a particular error. That error will be one of the following types: Named Entities: An entity (names, places, locations, etc.) is changed to a different entity. Numerical Values: Numerical values (ordinals or cardinals), dates, and/or units are changed. Modifiers or Adjectives: The modifiers and adjectives pertaining to a noun are changed. Negation or Antonyms: Introduce or remove a negation or change comparatives to their antonyms. Facts: Trivial factual errors not pertaining to the above classes are introduced in the translations. Dropped Content: A significant clause in the translation is removed. Please identify that error.  Source: \u0141eba ist eine Kleinstadt und ein Badeort im Powiat L\u0119borski der polnischen Woiwodschaft Pommern.\nTranslation: Eba is not a small town and seaside resort in the Powiat L\u00e9borski county of the Pomeranian Voivodeship of Poland.\nThe translation contains an error pertaining to\nOptions:\n(A) Modifiers or Adjectives\n(B) Numerical Values\n(C) Negation or Antonyms\n(D) Named Entities\n(E) Dropped Content\n(F) Facts",
                "assistant": "Step 1: Identify the error in the translation.\nThe source sentence states that \"\u0141eba is a small town and seaside resort in the Powiat L\u0119borski county of the Pomeranian Voivodeship of Poland.\"\nThe translation, however, states that \"Eba is not a small town and seaside resort in the Powiat L\u00e9borski county of the Pomeranian Voivodeship of Poland.\"\n\nStep 2: Classify the error.\nThe error in the translation is the introduction of a negation, changing the meaning of the sentence. This falls under the category of \"Negation or Antonyms.\"\n\nTherefore, the answer is \\boxed{(C)}."
            }
        ]
    },
    "snarks": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Determine which of two sentences is sarcastic.\n\nAccording to Cambridge University Dictionary, sarcasm is \"the use of remarks that clearly mean the opposite of what they say, made in order to hurt someone's feelings or to criticize something in a humorous way.\" Sarcastic sentences often contain satirical or ironic utterances, hyperboles, ambivalent or witty remarks.\n\nWhich statement is sarcastic?\nOptions:\n(A) Yes, because having interests and actively researching them is a huge waste\n(B) Yes, because having interests and actively researching them is a huge deal",
                "assistant": "Step 1: Analyze each sentence.\n(A) \"Yes, because having interests and actively researching them is a huge waste\" - it says that having interests and actively researching them is a huge waste, implying that it is a useless effort. However, we know that having interests and actively researching them is typically not a waste but rather is beneficial to the individual. The presence of such a juxtaposition in (A) suggests that it contains a taste of irony and sarcasm.\n(B) \"Yes, because having interests and actively researching them is a huge deal\" - it says that having interests and actively researching them is a huge deal, implying that it is an important and consequential effort. This is arguably a neutral and correct statement.\n\nStep 2: Select the option.\nAbove the above, the sarcastic option is (A).\n\nTherefore, the answer is \\boxed{(A)}."
            },
            {
                "user": "Which statement is sarcastic?\nOptions:\n(A) No one is going to disagree with you on this. Avoiding ad hominem attacks really help your case\n(B) No one is going to disagree with you on this. Ad hominem attacks really help your case",
                "assistant": "Step 1: Analyze each sentence.\n(A) \"No one is going to disagree with you on this. Avoiding ad hominem attacks really help your case\" - it says that avoiding ad hominem attacks really help your case, implying that ad hominem attacks are adverse and injurious. Because ad hominem attacks are adressed at a person rather than an idea, it is indeed true that avoiding them is often useful and helpful; so, (A) is a neutral (valid and agreeable) statement.\n(B) \"No one is going to disagree with you on this. Ad hominem attacks really help your case\" - it says that ad hominem attacks really help your case, implying that ad hominem attacks are a positive thing. However, we stated previously that ad hominem attacks are often not useful or constructive. The speaker in this sentence therefore seems to mean the opposite of what they are saying; so, there appears to have a taste of irony and sarcasm in (B).\n\nStep 2: Select the option.\nAbove the above, the sarcastic option is (B).\n\nTherefore, the answer is \\boxed{(B)}."
            },
            {
                "user": "Which statement is sarcastic?\nOptions:\n(A) Consistency in the league's punishments? What do you think this is supposed to be, politics?\n(B) Consistency in the league's punishments? What do you think this is supposed to be, moral?",
                "assistant": "Step 1: Analyze each sentence.\n(A) \"Consistency in the league's punishments? What do you think this is supposed to be, politics?\" - it likens the consistency in the league's punishments with that in politics. Because politics or political affairs are often not considered to be consistent or dependable, this sentence appears to be satirical.\n(B) \"Consistency in the league's punishments? What do you think this is supposed to be, moral?\" - it likens the consistency in the league's punishments with that in morality. Discussing the consistency of the league's punishments in the context of morality, ethics, or law makes sense and does not appear to make a satirical point about anything.\n\nStep 2: Select the option.\nAbove the above, the sarcastic option is (A).\n\nTherefore, the answer is \\boxed{(A)}."
            }
        ]
    },
    "sports_understanding": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Determine whether an artificially constructed sentence relating to sports is plausible or not.\n\nIs the following sentence plausible? \"Bam Adebayo scored a reverse layup in the Western Conference Finals.\"",
                "assistant": "Step 1: Recall the infomation of the sport player.\nBam Adebayo is an American basketball player.\n\nStep 2: Recall the infomation of the sport.\nScoring a reverse layup in the Western Conference Finals is part of the NBA Finals.\n\nStep 3: Evaluate the plausibility of the sentence.\nIt is plausible for an American basketball player Bam Adebayo to score a reverse layup in the Western Conference Finals of NBA.\n\nTherefore, the answer is \\boxed{yes}."
            },
            {
                "user": "Is the following sentence plausible? \"Santi Cazorla scored a touchdown.\"",
                "assistant": "Step 1: Recall the infomation of the sport player.\nSanti Cazorla is a soccer player.\n\nStep 2: Recall the infomation of the sport.\nTouchdown is part of American football and rugby.\n\nStep 3: Evaluate the plausibility of the sentence.\nIt is not plausible for Santi Cazorla to score a touchdown.\n\nTherefore, the answer is \\boxed{no}."
            },
            {
                "user": "Is the following sentence plausible? \"DeMar DeRozan was called for the goal tend.\"",
                "assistant": "Step 1: Recall the infomation of the sport player.\nDeMar DeRozan is an American basketball player.\n\nStep 2: Recall the infomation of the sport.\nGoal tending is part of basketball.\n\nStep 3: Evaluate the plausibility of the sentence.\nGiven that DeMar DeRozan is a basketball player, it is plausible that he could be called for a goal tend during a game.\n\nTherefore, the answer is \\boxed{yes}."
            }
        ]
    },
    "temporal_sequences": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Task description: Answer questions about which times certain events could have occurred.\n\nToday, Emily went to the museum. Between what times could they have gone?\nWe know that:\nEmily woke up at 1pm.\nElizabeth saw Emily reading at the library from 2pm to 4pm.\nJessica saw Emily watching a movie at the theater from 4pm to 5pm.\nLeslie saw Emily waiting at the airport from 5pm to 6pm.\nWilliam saw Emily buying clothes at the mall from 6pm to 7pm.\nThe museum was closed after 7pm.\nBetween what times could Emily have gone to the museum?\nOptions:\n(A) 1pm to 2pm\n(B) 6pm to 7pm\n(C) 5pm to 6pm\n(D) 2pm to 4pm",
                "assistant": "```python\ndef convert_to_24_hour(time_str):\n    \"\"\"\n    This function converts the 12-hour time string to 24-hour number.\n    \"\"\"\n    number = int(time_str.replace('am', '').replace('pm', ''))\n    if time_str.endswith('am'):\n        return number if number != 12 else 0\n    else:\n        return number + 12 if number != 12 else 12\n\ndef check_time_slot(event_time, time_slots, start_time, end_time):\n    \"\"\"\n    This function checks if a given event time slot is free in the provided time slots.\n    \"\"\"\n    if convert_to_24_hour(event_time[0]) > convert_to_24_hour(end_time):\n        return False\n    if convert_to_24_hour(event_time[1]) < convert_to_24_hour(start_time):\n        return False\n    for time_slot in time_slots:\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[0]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[1]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) <= convert_to_24_hour(event_time[0]) and convert_to_24_hour(event_time[1]) <= convert_to_24_hour(time_slot[1]):\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    start_time = '1pm'\n    time_slots = [('2pm','4pm'), ('4pm','5pm'), ('5pm','6pm'), ('6pm','7pm')]\n    end_time = '7pm'\n    options = {'(A)': ('1pm','2pm'), '(B)': ('6pm','7pm'), '(C)': ('5pm','6pm'), '(D)': ('2pm','4pm')}\n    for option, event_time in options.items():\n        if check_time_slot(event_time, time_slots, start_time, end_time):\n            print(option)\n            break\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "Today, Elizabeth went to the amusement park. Between what times could they have gone?\nWe know that:\nElizabeth woke up at 7am.\nDavid saw Elizabeth fixing their computer at the electronic store from 1pm to 2pm.\nSarah saw Elizabeth playing tennis at the tennis court from 2pm to 3pm.\nSusan saw Elizabeth walking towards the Statue of Liberty from 3pm to 6pm.\nAndrew saw Elizabeth taking photos near the Eiffel Tower from 6pm to 9pm.\nEmily saw Elizabeth getting a coffee at the cafe from 9pm to 10pm.\nThe amusement park was closed after 10pm.\nBetween what times could Elizabeth have gone to the amusement park?\nOptions:\n(A) 7am to 1pm\n(B) 9pm to 10pm\n(C) 1pm to 2pm\n(D) 3pm to 6pm",
                "assistant": "```python\ndef convert_to_24_hour(time_str):\n    \"\"\"\n    This function converts the 12-hour time string to 24-hour number.\n    \"\"\"\n    number = int(time_str.replace('am', '').replace('pm', ''))\n    if time_str.endswith('am'):\n        return number if number != 12 else 0\n    else:\n        return number + 12 if number != 12 else 12\n\ndef check_time_slot(event_time, time_slots, start_time, end_time):\n    \"\"\"\n    This function checks if a given event time slot is free in the provided time slots.\n    \"\"\"\n    if convert_to_24_hour(event_time[0]) > convert_to_24_hour(end_time):\n        return False\n    if convert_to_24_hour(event_time[1]) < convert_to_24_hour(start_time):\n        return False\n    for time_slot in time_slots:\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[0]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[1]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) <= convert_to_24_hour(event_time[0]) and convert_to_24_hour(event_time[1]) <= convert_to_24_hour(time_slot[1]):\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    start_time = '7am'\n    time_slots = [('1pm','2pm'), ('2pm','3pm'), ('3pm','6pm'), ('6pm','9pm'), ('9pm','10pm')]\n    end_time = '10pm'\n    options = {'(A)': ('7am','1pm'), '(B)': ('9pm','10pm'), '(C)': ('1pm','2pm'), '(D)': ('3pm','6pm')}\n    for option, event_time in options.items():\n        if check_time_slot(event_time, time_slots, start_time, end_time):\n            print(option)\n            break\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "Today, Tiffany went to the beach. Between what times could they have gone?\nWe know that:\nTiffany woke up at 5am.\nBetty saw Tiffany getting a coffee at the cafe from 5am to 6am.\nJessica saw Tiffany working at the office from 6am to 9am.\nJohn saw Tiffany stretching at a yoga studio from 9am to 12pm.\nSean saw Tiffany sitting on a rooftop from 12pm to 2pm.\nSarah saw Tiffany playing tennis at the tennis court from 2pm to 3pm.\nThe beach was closed after 4pm.\nBetween what times could Tiffany have gone to the beach?\nOptions:\n(A) 9am to 12pm\n(B) 12pm to 2pm\n(C) 5am to 6am\n(D) 3pm to 4pm",
                "assistant": "```python\ndef convert_to_24_hour(time_str):\n    \"\"\"\n    This function converts the 12-hour time string to 24-hour number.\n    \"\"\"\n    number = int(time_str.replace('am', '').replace('pm', ''))\n    if time_str.endswith('am'):\n        return number if number != 12 else 0\n    else:\n        return number + 12 if number != 12 else 12\n\ndef check_time_slot(event_time, time_slots, start_time, end_time):\n    \"\"\"\n    This function checks if a given event time slot is free in the provided time slots.\n    \"\"\"\n    if convert_to_24_hour(event_time[0]) > convert_to_24_hour(end_time):\n        return False\n    if convert_to_24_hour(event_time[1]) < convert_to_24_hour(start_time):\n        return False\n    for time_slot in time_slots:\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[0]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) < convert_to_24_hour(event_time[1]) < convert_to_24_hour(time_slot[1]):\n            return False\n        if convert_to_24_hour(time_slot[0]) <= convert_to_24_hour(event_time[0]) and convert_to_24_hour(event_time[1]) <= convert_to_24_hour(time_slot[1]):\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    start_time = '5am'\n    time_slots = [('5am','6am'), ('6am','9am'), ('9am','12pm'), ('12pm','2pm'), ('2pm','3pm')]\n    end_time = '4pm'\n    options = {'(A)': ('9am','12pm'), '(B)': ('12pm','2pm'), '(C)': ('5am','6am'), '(D)': ('3pm','4pm')}\n    for option, event_time in options.items():\n        if check_time_slot(event_time, time_slots, start_time, end_time):\n            print(option)\n            break\n\nmain()\n```\n\nThe answer is \\boxed{(D)}."
            }
        ]
    },
    "tracking_shuffled_objects_five_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A task requiring determining the final positions of a set of objects given their initial positions and a description of a sequence of swaps.\n\nAlice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a yellow ball, Bob has a blue ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Claire and Alice swap balls. Then, Alice and Bob swap balls. Finally, Claire and Bob swap balls. At the end of the game, Bob has the\nOptions:\n(A) yellow ball\n(B) blue ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'yellow', 'Bob': 'blue', 'Claire': 'pink'}\n    swap_sequence = [('Claire', 'Alice'), ('Alice', 'Bob'), ('Claire', 'Bob')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Bob']\n    \n    options = {'yellow': '(A)', 'blue': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "Alice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a white ball, Bob has a purple ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Bob and Alice swap balls. Then, Bob and Claire swap balls. Finally, Bob and Alice swap balls. At the end of the game, Alice has the\nOptions:\n(A) white ball\n(B) purple ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'white', 'Bob': 'purple', 'Claire': 'pink'}\n    swap_sequence = [('Bob', 'Alice'), ('Bob', 'Claire'), ('Bob', 'Alice')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Alice']\n    \n    options = {'white': '(A)', 'purple': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            },
            {
                "user": "Alice, Bob, and Claire are dancers at a square dance. At the start of a song, they each have a partner: Alice is dancing with Lola, Bob is dancing with Rodrigo, and Claire is dancing with Patrick.\nThroughout the song, the dancers often trade partners. First, Alice and Bob switch partners. Then, Claire and Bob switch partners. Finally, Bob and Alice switch partners. At the end of the dance, Alice is dancing with\nOptions:\n(A) Lola\n(B) Rodrigo\n(C) Patrick",
                "assistant": "```python\ndef switch_partners(dancers, switch_sequence):\n    \"\"\"\n    This function takes a dictionary of dancers and their partners, and a list of tuples \n    representing the sequence of switches. It updates the dictionary according to the switch sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for switch in switch_sequence:\n        dancers[switch[0]], dancers[switch[1]] = dancers[switch[1]], dancers[switch[0]]\n    return dancers\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    dancers = {'Alice': 'Lola', 'Bob': 'Rodrigo', 'Claire': 'Patrick'}\n    switch_sequence = [('Alice', 'Bob'), ('Claire', 'Bob'), ('Bob', 'Alice')]\n    final_positions = switch_partners(dancers, switch_sequence)\n    partner = final_positions['Alice']\n    \n    options = {'Lola': '(A)', 'Rodrigo': '(B)', 'Patrick': '(C)'}\n    print(options[partner])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "tracking_shuffled_objects_seven_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A task requiring determining the final positions of a set of objects given their initial positions and a description of a sequence of swaps.\n\nAlice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a yellow ball, Bob has a blue ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Claire and Alice swap balls. Then, Alice and Bob swap balls. Finally, Claire and Bob swap balls. At the end of the game, Bob has the\nOptions:\n(A) yellow ball\n(B) blue ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'yellow', 'Bob': 'blue', 'Claire': 'pink'}\n    swap_sequence = [('Claire', 'Alice'), ('Alice', 'Bob'), ('Claire', 'Bob')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Bob']\n    \n    options = {'yellow': '(A)', 'blue': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "Alice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a white ball, Bob has a purple ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Bob and Alice swap balls. Then, Bob and Claire swap balls. Finally, Bob and Alice swap balls. At the end of the game, Alice has the\nOptions:\n(A) white ball\n(B) purple ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'white', 'Bob': 'purple', 'Claire': 'pink'}\n    swap_sequence = [('Bob', 'Alice'), ('Bob', 'Claire'), ('Bob', 'Alice')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Alice']\n    \n    options = {'white': '(A)', 'purple': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            },
            {
                "user": "Alice, Bob, and Claire are dancers at a square dance. At the start of a song, they each have a partner: Alice is dancing with Lola, Bob is dancing with Rodrigo, and Claire is dancing with Patrick.\nThroughout the song, the dancers often trade partners. First, Alice and Bob switch partners. Then, Claire and Bob switch partners. Finally, Bob and Alice switch partners. At the end of the dance, Alice is dancing with\nOptions:\n(A) Lola\n(B) Rodrigo\n(C) Patrick",
                "assistant": "```python\ndef switch_partners(dancers, switch_sequence):\n    \"\"\"\n    This function takes a dictionary of dancers and their partners, and a list of tuples \n    representing the sequence of switches. It updates the dictionary according to the switch sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for switch in switch_sequence:\n        dancers[switch[0]], dancers[switch[1]] = dancers[switch[1]], dancers[switch[0]]\n    return dancers\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    dancers = {'Alice': 'Lola', 'Bob': 'Rodrigo', 'Claire': 'Patrick'}\n    switch_sequence = [('Alice', 'Bob'), ('Claire', 'Bob'), ('Bob', 'Alice')]\n    final_positions = switch_partners(dancers, switch_sequence)\n    partner = final_positions['Alice']\n    \n    options = {'Lola': '(A)', 'Rodrigo': '(B)', 'Patrick': '(C)'}\n    print(options[partner])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "tracking_shuffled_objects_three_objects": {
        "system_prompt": "",
        "examples": [
            {
                "user": "A task requiring determining the final positions of a set of objects given their initial positions and a description of a sequence of swaps.\n\nAlice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a yellow ball, Bob has a blue ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Claire and Alice swap balls. Then, Alice and Bob swap balls. Finally, Claire and Bob swap balls. At the end of the game, Bob has the\nOptions:\n(A) yellow ball\n(B) blue ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'yellow', 'Bob': 'blue', 'Claire': 'pink'}\n    swap_sequence = [('Claire', 'Alice'), ('Alice', 'Bob'), ('Claire', 'Bob')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Bob']\n    \n    options = {'yellow': '(A)', 'blue': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(A)}."
            },
            {
                "user": "Alice, Bob, and Claire are playing a game. At the start of the game, they are each holding a ball: Alice has a white ball, Bob has a purple ball, and Claire has a pink ball.\nAs the game progresses, pairs of players trade balls. First, Bob and Alice swap balls. Then, Bob and Claire swap balls. Finally, Bob and Alice swap balls. At the end of the game, Alice has the\nOptions:\n(A) white ball\n(B) purple ball\n(C) pink ball",
                "assistant": "```python\ndef swap_balls(players, swap_sequence):\n    \"\"\"\n    This function takes a dictionary of players and the balls they are holding, and a list of tuples \n    representing the sequence of swaps. It updates the dictionary according to the swap sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for swap in swap_sequence:\n        players[swap[0]], players[swap[1]] = players[swap[1]], players[swap[0]]\n    return players\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    players = {'Alice': 'white', 'Bob': 'purple', 'Claire': 'pink'}\n    swap_sequence = [('Bob', 'Alice'), ('Bob', 'Claire'), ('Bob', 'Alice')]\n    final_positions = swap_balls(players, swap_sequence)\n    ball_color = final_positions['Alice']\n    \n    options = {'white': '(A)', 'purple': '(B)', 'pink': '(C)'}\n    print(options[ball_color])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            },
            {
                "user": "Alice, Bob, and Claire are dancers at a square dance. At the start of a song, they each have a partner: Alice is dancing with Lola, Bob is dancing with Rodrigo, and Claire is dancing with Patrick.\nThroughout the song, the dancers often trade partners. First, Alice and Bob switch partners. Then, Claire and Bob switch partners. Finally, Bob and Alice switch partners. At the end of the dance, Alice is dancing with\nOptions:\n(A) Lola\n(B) Rodrigo\n(C) Patrick",
                "assistant": "```python\ndef switch_partners(dancers, switch_sequence):\n    \"\"\"\n    This function takes a dictionary of dancers and their partners, and a list of tuples \n    representing the sequence of switches. It updates the dictionary according to the switch sequence and \n    returns the updated dictionary.\n    \"\"\"\n    for switch in switch_sequence:\n        dancers[switch[0]], dancers[switch[1]] = dancers[switch[1]], dancers[switch[0]]\n    return dancers\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    dancers = {'Alice': 'Lola', 'Bob': 'Rodrigo', 'Claire': 'Patrick'}\n    switch_sequence = [('Alice', 'Bob'), ('Claire', 'Bob'), ('Bob', 'Alice')]\n    final_positions = switch_partners(dancers, switch_sequence)\n    partner = final_positions['Alice']\n    \n    options = {'Lola': '(A)', 'Rodrigo': '(B)', 'Patrick': '(C)'}\n    print(options[partner])\n\nmain()\n```\n\nThe answer is \\boxed{(C)}."
            }
        ]
    },
    "web_of_lies": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Evaluate a random boolean function expressed as a word problem.\n\nQuestion: Fidel tells the truth. Jerry says Fidel tells the truth. Vina says Jerry tells the truth. Millicent says Vina lies. Raymond says Millicent lies. Does Raymond tell the truth?",
                "assistant": "```python\ndef evaluate_statements(initial_condition, statements):\n    \"\"\"\n    This function takes a dictionary of statements where each key is a person and the value is the person they are \n    commenting on and whether they believe that person is telling the truth or not. \n    The function returns a dictionary where each key is a person and the value is a boolean representing whether \n    that person is telling the truth or not.\n    \"\"\"\n    truth_values = initial_condition\n    for person, (target, statement) in statements.items():\n        if statement == 'truth':\n            truth_values[person] = truth_values[target]\n        else:\n            truth_values[person] = not truth_values[target]\n    return truth_values\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    initial_condition = {'Fidel': True}\n    statements = {\n        'Jerry': ('Fidel', 'truth'),\n        'Vina': ('Jerry', 'truth'),\n        'Millicent': ('Vina', 'lies'),\n        'Raymond': ('Millicent', 'lies')\n    }\n    truth_values = evaluate_statements(initial_condition, statements)\n    print('Yes' if truth_values['Raymond'] else 'No')\n\nmain()\n```\n\nThe answer is \\boxed{Yes}."
            },
            {
                "user": "Question: Kristian lies. Millie says Kristian lies. Maybelle says Millie tells the truth. Fidel says Maybelle lies. Leda says Fidel lies. Does Leda tell the truth?",
                "assistant": "```python\ndef evaluate_statements(initial_condition, statements):\n    \"\"\"\n    This function takes a dictionary of statements where each key is a person and the value is the person they are \n    commenting on and whether they believe that person is telling the truth or not. \n    \"\"\"\n    truth_values = initial_condition\n    for person, (target, statement) in statements.items():\n        if statement == 'truth':\n            truth_values[person] = truth_values[target]\n        else:\n            truth_values[person] = not truth_values[target]\n    return truth_values\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    initial_condition = {'Kristian': False}\n    statements = {\n        'Millie': ('Kristian', 'lies'),\n        'Maybelle': ('Millie', 'truth'),\n        'Fidel': ('Maybelle', 'lies'),\n        'Leda': ('Fidel', 'lies')\n    }\n    truth_values = evaluate_statements(initial_condition, statements)\n    print('Yes' if truth_values['Leda'] else 'No')\n\nmain()\n```\n\nThe answer is \\boxed{Yes}."
            },
            {
                "user": "Question: Kristian tells the truth. Michaela says Kristian lies. Raymond says Michaela tells the truth. Osvaldo says Raymond tells the truth. Jamey says Osvaldo tells the truth. Does Jamey tell the truth?",
                "assistant": "```python\ndef evaluate_statements(initial_condition, statements):\n    \"\"\"\n    This function takes a dictionary of statements where each key is a person and the value is the person they are \n    commenting on and whether they believe that person is telling the truth or not. \n    \"\"\"\n    truth_values = initial_condition\n    for person, (target, statement) in statements.items():\n        if statement == 'truth':\n            truth_values[person] = truth_values[target]\n        else:\n            truth_values[person] = not truth_values[target]\n    return truth_values\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    initial_condition = {'Kristian': True}\n    statements = {\n        'Michaela': ('Kristian', 'lies'),\n        'Raymond': ('Michaela', 'truth'),\n        'Osvaldo': ('Raymond', 'truth'),\n        'Jamey': ('Osvaldo', 'truth')\n    }\n    truth_values = evaluate_statements(initial_condition, statements)\n    print('Yes' if truth_values['Jamey'] else 'No')\n\nmain()\n```\n\nThe answer is \\boxed{No}."
            }
        ]
    },
    "word_sorting": {
        "system_prompt": "",
        "examples": [
            {
                "user": "Sort a list of words.\n\nSort the following words alphabetically: List: oven costume counterpart",
                "assistant": "```python\ndef sort_words(words):\n    \"\"\"\n    This function takes a list of words and returns a list of the words sorted in alphabetical order.\n    \"\"\"\n    return sorted(words)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    words = ['oven', 'costume', 'counterpart']\n    sorted_words = sort_words(words)\n    print(' '.join(sorted_words))\n\nmain()\n```\n\nThe answer is \\boxed{costume counterpart oven}."
            },
            {
                "user": "Sort the following words alphabetically: List: hypochlorite ponderosa phone credulity",
                "assistant": "```python\ndef sort_words(words):\n    \"\"\"\n    This function takes a list of words and returns a list of the words sorted in alphabetical order.\n    \"\"\"\n    return sorted(words)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    words = ['hypochlorite', 'ponderosa', 'phone', 'credulity']\n    sorted_words = sort_words(words)\n    print(' '.join(sorted_words))\n\nmain()\n```\n\nThe answer is \\boxed{credulity hypochlorite phone ponderosa}."
            },
            {
                "user": "Sort the following words alphabetically: List: newt arson parthia seismography mugho aspect census",
                "assistant": "```python\ndef sort_words(words):\n    \"\"\"\n    This function takes a list of words and returns a list of the words sorted in alphabetical order.\n    \"\"\"\n    return sorted(words)\n\ndef main():\n    \"\"\"\n    The main function that calls the other functions and prints the answer.\n    \"\"\"\n    words = ['newt', 'arson', 'parthia', 'seismography', 'mugho', 'aspect', 'census']\n    sorted_words = sort_words(words)\n    print(' '.join(sorted_words))\n\nmain()\n```\n\nThe answer is \\boxed{arson aspect census mugho newt parthia seismography}."
            }
        ]
    }
}